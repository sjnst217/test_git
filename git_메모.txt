1. git 관련 세미나 준비하기



git이란 
소스 코드 버전 관리 시스템

git hub
git 저장소를 올려서 관리하는 서비스



버전 관리 시스템에 대하여
- 작동 방식(틀), 의의

로컬 버전관리
local VCS - 하나의 PC를 이용해 version을 관리하는 시스템

중앙 집중식 버전관리
Centralized VCS - 하나의 서버 PC에 version을 관리하는 시스템

분산 버전관리 (git이 해당)
Distributed VCS - 모든 서버 및 PC에 version을 관리하는 시스템
- 많은 수의 원격 저장소 (Remote Repository)를 가질 수 있어 문제 해결에 용이함



git의 2가지 저장소

로컬 저장소 		
local repo - 컴퓨터 내의 저장소

원격 저장소
remote repo	- 네트워크 상의 저장소



git의 3가지 작업 영역 - local repo에 해당

Working Directory 	: 내가 작업하는 프로젝트의 디렉토리

Staging Area		: 커밋을 위해 추가한 파일들이 모여있는 공간
(=Index) - git add를 한 파일들이 존재

Repository 			: 커밋들이 모여있는 장소

W -> S
git add 사용
S -> R
git commit 사용, commit은 repo로 올리는 작업

위의 작업은 local repo에서 이루어 지는 일임
그러므로
local -> remote
git push 사용, push는 로컬에서 원격으로 보내는 작업
을 진행해주어야 remote상, 즉 github에 올릴 수 있음.



git 기본 용어 정리(https://sprint.codeit.kr/blog/%EA%B0%9C%EB%B0%9C%EC%9E%90-%ED%95%84%EC%88%98-%EC%A7%80%EC%8B%9D-git%EC%9D%B4-%EB%AD%94%EB%8D%B0)

Repository		: stage에서 대기하는 파일들을 version으로 만들어 저장하는 곳

Working Tree	: 현재 파일 수정, 저장하는 디렉터리(이름 공간)

Head 			: 현재 작업중인 branch

Snapshot		: 특정 시점에서의 파일, 폴더등의 상태
- 각 version별 각 파일 이라고 생각하면 될듯

Commit			: 변경된 작업 과정들에 대한 점검 후 저장소에 남기는 작업

Checkout 		: 이전 버전 작업으로 이동하는 것

Branch			: Commit 단위로 구분된 분기점

Merge			: 각 Branch내용을 합치는 작업

Fork			: 타인의 repo를 내 github로 가져오는 것


git 기본 명령어 정리 (https://blog.naver.com/jdusans/222043705693)
- 이후 헷갈릴때는 git bash에서 git help를 이용할 것

init	: 현재 폴더에 .git 폴더가 생성되고 git 명령어를 사용하도록 함
- init은 새로운 repo를 만들어 처음부터 코드를 작성할 때,

clone	: 로컬에 원격 저장소를 복사
- clone은 기존의 repo를 가져와서 코드를 작성할 때 사용하게 됨

status	: 파일에 수정 및 변경이 일어나면 파일의 상태를 보여주는 명령어

log		: 파일의 히스토리를 파악하는 명령어

remote	: 원격의 repo를 로컬에 연결할 때 사용함
- 다른걸 적지 않을 경우 원격 저장소 목록 확인용

push	: 지역 branch를 원격 branch에 보내기

pull	: 원격 저장소에서 변경 사항을 가져와 현재 브렌치에 합치기

fetch   : 원격 repo에서 최신 커밋을 가져와 origin 저장소에서 합치지 않고 지역 branch로 변경 사항 가져오기 
- pull은 원격에서 로걸 repo로 최신 커밋을 가져오지만, fetch는 다른 branch로 변경한다는 차이가 존재함

add		: stage상에 올리는 명령어

commit	: stage상에 있는 파일을 repo에 작성하기

checkout: branch 전환, 파일 체크아웃, 커밋으로 돌아가기 등의 용도로 사용
- bran1                 # bran1 브랜치로 전환
- -b new-feature        # 새 브랜치를 생성하고 그곳으로 전환
- 5d3a123               # 특정 커밋으로 HEAD를 이동
- -- file.txt           # 특정 파일을 마지막 커밋 상태로 복원

switch	: branch 전환
	
mv		: 파일이나 디렉토리의 이름을 변경하거나 파일의 폴더 위치를 변환
- 위치 변경은 폴더2폴더만 가능한듯

rm      : 파일 삭제

diff    : 커밋되어있는 최근 버전과 작업 폴더의 수정 파일 사이의 차이를 출력
- git diff 		: W <-> S
- git diff HEAD : W, S <-> R
라고 보면 됨
 
branch 	: 원본을 변경하지 않고 새로운 장소에 코드를 작성하기, branch 목록 보기
- git branch는 로컬, git branch -r은 원격 목록을 볼 수 있음

merge	: 다른 branch를 현재 branch에 합치기

rebase  : 두 개의 공통 Base를 가진 branch에서 한 branch의 base를 다른 branch의 최신 커밋으로 base를 옮기는 작업
- 강제로 push하기 때문에 force-with-lease 옵션 사용 권장

cherry-pick	: 특정 커밋을 선택하여 현재 브랜치에 적용
- rebase와 근본적으로 비슷하지만, rebase는 모두 최신이여야 한다면 cherry-pick은 옛날의 branch라고
하더라도 내가 원하는 branch에 가져올 수 있다는 장점이 존재함.
- 결국 cherry-pick은 commit 하나만 rebase 한다고 생각하면 됨.
- 다른 사람의 커밋 중 일부를 가져오는 경우에 주로 사용.

rebase와 cherry-pick 차이점 설명 링크 - (https://yoongrammer.tistory.com/25)

restore : 최근 커밋된 상태로 현재 수정내용을 되돌림
- git reset (HEAD~1) 은 현재 가르키는 commit을 1개 돌리기
- git restore filename 은 staging도 하지 않은 그냥 잘못 작성한 파일의 수정 상태를 최근 커밋으로 되돌림
이게 차이점.


reset   : 과거의 어떤 코드의 commit으로 돌아감
- 옵션에 hard, soft, mixed가 있어 다 되돌리기, add는 되어있기, add를 해야하는 상태로 변경 가능
- hard로 없앤것을 다시 되돌리고 싶다면 git reflog를 쳐서 삭제된 해시값을 찾아내서 다시 reset하면 됨
- 없앴다는 사실이 commit에 남지 않음
- local에서 commit 취소시 사용

revert	: 과거의 어떤 코드의 커밋을 취소
- git revert commit_id 로 해당 커밋아이디에서 일어난 일만 취소
- 없앴다는 사실이 commit에 남음
- push된 상태일때 commit 취소시 사용


stash 		: 어떤 작업을 하던 중 완료하지 않고(commit하지 않고) 다른 브랜치로 가야 할 때 stack에 잠시 올려두는것 
- 즉 하던 작업 임시로 저장하기
git stash list 	: 목록 확인하기
git stash apply	: 최근의 stash 가져오기
git stash drop	: stash 제거하기
git stash pop 	: drop + apply
git stash-unapply : git상에는 존재하지 않는 명령어, apply된 코드를 다시 stack으로 올림

echo 	: 화면에 문자를 출력하는 명령어
- > 나 >>를 이용해서 파일을 생성하면서 내용을 넣을 수도 있음

>		: 이전 내용에 상관없이 새로 쓰는 것

>>		: 기존 내용은 그대로 두고 그 위에 추가 하는 것



.gitignore	: git에서 관리하지 못하게 하는것
- 파일에 제외할 폴더 명을 적어주면 git에서 제외됨 



업무상의 branch의 종류

Long-Running
- main 브랜치에 merge되지 않은 활성화된 개발용 브랜치

Topic
- 어떤 한 가지 주제나 작업을 위해 만든 브랜치



Pull Request	: 한 브랜치에서 다른 브랜치로 변경 사항을 병합하는것을 제안하는 과정
- 결국 여러 사람이 협엽하는 환경에서, 원류(main)에서 새로운 작업을 하기 위해 branch를 따서 가져가 코드를 만들었으면,
그 코드를 합쳐도 되는지 github내에서 물어볼 수 있는 github의 기능이라고 생각하면 될듯



진행상황

git init

git add

git commit

git push

.gitignore

git mv
- 파일명 or 위치 변경
git rm
- 파일 삭제
git diff
- 이전 커밋과 다른 점 찾기
git reset
- 옛날 커밋으로 돌어가기
git revert
- 새로운 커밋에 옛날 커밋을 가져오기
git restore
- 최근 커밋으로 내용 돌리기
git fetch
- 원격 repo의 최신 커밋을 다른 branch로 가져오기
- 소스제어 부분에서 다른점이 무엇인지 볼 수 있지만 실질적으로 변하는 부분은 없음
git clone
- 원격 repo를 가져옴
git branch
- branch 목록보기 or 새로운 branch 만들기
git switch
- branch 전환
git checkout
- branch 전환, 옛날 branch로 head변경하기
- working directory에 있는 특정 파일을 옛날 commit으로 돌아가기
	- 이건 결국 현재 수정 사항이 이상해서 바로 전 commit으로 돌아가는 느낌
git stash
- commit을 하고싶지 않은데 다른 branch로 옮겨야 할 때 stack에 코드를 올려놓는 것


해볼거

git merge
- ff, non-ff, 3way 해보기
git rebase
- 하나의 base에서 여러 branch를 작성하여 합쳐보기
- 문제점 생기는 부분 해보기
git cherry-pick




다른 작업 영역으로 옮기기
- add, commit, push, pull, clone, fetch, stash

branch 관련
- branch, switch, checkout, merge, rebase

이전으로 돌아가기
- reset, revert, restore, cherry-pick

etc.
- mv, rm, diff




github 다른 계정 쓰고 싶으면

자격 증명 관리자 -> Windows 자격 증명 -> github 사이트 아이디 비번 바꾸기



























